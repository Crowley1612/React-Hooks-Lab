import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { Card, Typography, Button, Space } from 'antd';

//Khai b√°o props (1.constructor, 2.props)
interface CounterProps {
  initialCount?: number; //Kh·ªüi t·∫°o gi√° tr·ªã ban ƒë·∫ßu c·ªßa count
}

const FunctionLifecycle: React.FC<CounterProps> = ({ initialCount = 0 }) => {
  //C·∫≠p nh·∫≠t state cho props
  const [count, setCount] = useState<number>(initialCount); //Kh·ªüi t·∫°o state count v·ªõi gi√° tr·ªã ban ƒë·∫ßu l√† initialCount
  const [clicks, setClicks] = useState<number>(0); //G√≠a tr·ªã m·∫∑c ƒë·ªãnh l√† 0

  useEffect(() => {
    console.log('üîµ Mounted');
    return () => console.log('üî¥ Unmounted');
  }, []); //useEffect ƒë∆∞·ª£c g·ªçi khi component ƒë∆∞·ª£c mount v√† unmount nh·∫±m theo d√µi v√≤ng ƒë·ªùi

  useEffect(() => {
    console.log('üü° Count updated:', count);
  }, [count]); //hook ƒë∆∞·ª£c g·ªçi khi state count thay ƒë·ªïi

  const double = useMemo(() => {
    console.log('üîÅ Calculating double');
    return count * 2;
  }, [count]); //hook n√†y T√≠nh double m·ªói khi count thay ƒë·ªïi, n·∫øu count kh√¥ng ƒë·ªïi th√¨ s·∫Ω kh√¥ng t√≠nh l·∫°i gi√° tr·ªã, t·ªëi ∆∞u hi·ªáu nƒÉng.

  const handleClick = useCallback(() => {
    setClicks((c) => c + 1);
    setCount((c) => c + 1);
  }, []); //hook n√†y ƒë∆∞·ª£c g·ªçi khi click button, tƒÉng gi√° tr·ªã c·ªßa count v√† clicks

  //Render component
  return (
    <Card title="Function Component" className="h-100" styles={{ header: { color: '#3f51b5', fontWeight: 'bold' } }}>
      <Space direction="vertical">
        <Typography.Text>Count: <strong>{count}</strong></Typography.Text>
        <Typography.Text>Double (memoized): <strong>{double}</strong></Typography.Text>
        <Typography.Text>Clicks: <strong>{clicks}</strong></Typography.Text>
        <Button type="primary" block onClick={handleClick}>Increase</Button>
      </Space>
    </Card>
  );
};

export default FunctionLifecycle;
